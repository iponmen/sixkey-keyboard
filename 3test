alpha_groups = [["a","b","c","d","e"],["f","g","h","i","j"],["k","l","m","n","o"],["p","q","r","s","t"],["u","v","w","x","y","z"]]


function char_to_alpha(char_1){
    alpha_groups = [["a","b","c","d","e"],["f","g","h","i","j"],["k","l","m","n","o"],["p","q","r","s","t"],["u","v","w","x","y","z"]]

    x = order_char(char_1)-order_char("a")
    x = int_devide(x,5)+1
    //range 1-5
    if(x<=0 || x>5){
        throw new Error(x)
    }
    return x
}
function strin_to_alpha_code(strin_1){
    if (typeof(strin_1) != "string") {
        throw new Error()
    }
    result = ""
    for (let i = 0; i < strin_1.length; i++) {
        const element = strin_1[i];
        result += char_to_alpha(element)
    }
    return(result)
}
function int_devide(a,b){
    return Math.floor(a/b)
}
function order_char(char_1){
    if(typeof(char_1)!="string"){
        throw new Error()
    }
    if(char_1.length!=1){
        throw new Error()
    }
    return char_1.charCodeAt(0)


}
function acces_letter(strn,x){
    return strn[x]

}
function print(strn){
    console.log(strn)
}
class alpha_dict{
    static x1=["the","at","there","some","my","of","be","use","her","than","and","this","an","would","first","a","have","each","make","water","to","from","which","like","been","in","or","she","him","call","is","one","do","into","who","you","had","how","time","oil","that","by","their","has","its","it","word","if","look","now","he","but","will","two","find","was","not","up","more","long","for","what","other","write","down","on","all","about","go","day","are","were","out","see","did","as","we","many","number","get","with","when","then","no","come","his","your","them","way","made","they","can","these","could","may","said","so","people","part"]
    constructor(){
        this.d={}
        for (let i = 0; i < alpha_dict.x1.length; i++) {
            var element = alpha_dict.x1[i];
            var alpha_code_of_elemet = strin_to_alpha_code(element)
            if(exsists(this.d[alpha_code_of_elemet])){
                alpha_code_of_elemet += "6"
            }
            this.d[alpha_code_of_elemet] = element            
        }
    }
}
function exsists(element) {
    return(element != undefined)
}

n1 = new alpha_dict()
console.log(n1.d)
print(char_to_alpha("a"))
print(strin_to_alpha_code("the"))